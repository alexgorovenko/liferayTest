package com.EmployeesDB.service.base;

import com.EmployeesDB.model.Positions;

import com.EmployeesDB.service.PositionsLocalService;
import com.EmployeesDB.service.persistence.BankPersistence;
import com.EmployeesDB.service.persistence.EmployeesPersistence;
import com.EmployeesDB.service.persistence.PositionsPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the positions local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.EmployeesDB.service.impl.PositionsLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.EmployeesDB.service.impl.PositionsLocalServiceImpl
 * @see com.EmployeesDB.service.PositionsLocalServiceUtil
 * @generated
 */
public abstract class PositionsLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements PositionsLocalService, IdentifiableBean {
    @BeanReference(type = com.EmployeesDB.service.BankLocalService.class)
    protected com.EmployeesDB.service.BankLocalService bankLocalService;
    @BeanReference(type = BankPersistence.class)
    protected BankPersistence bankPersistence;
    @BeanReference(type = com.EmployeesDB.service.EmployeesLocalService.class)
    protected com.EmployeesDB.service.EmployeesLocalService employeesLocalService;
    @BeanReference(type = EmployeesPersistence.class)
    protected EmployeesPersistence employeesPersistence;
    @BeanReference(type = com.EmployeesDB.service.PositionsLocalService.class)
    protected com.EmployeesDB.service.PositionsLocalService positionsLocalService;
    @BeanReference(type = PositionsPersistence.class)
    protected PositionsPersistence positionsPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private PositionsLocalServiceClpInvoker _clpInvoker = new PositionsLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.EmployeesDB.service.PositionsLocalServiceUtil} to access the positions local service.
     */

    /**
     * Adds the positions to the database. Also notifies the appropriate model listeners.
     *
     * @param positions the positions
     * @return the positions that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Positions addPositions(Positions positions)
        throws SystemException {
        positions.setNew(true);

        return positionsPersistence.update(positions);
    }

    /**
     * Creates a new positions with the primary key. Does not add the positions to the database.
     *
     * @param positionId the primary key for the new positions
     * @return the new positions
     */
    @Override
    public Positions createPositions(long positionId) {
        return positionsPersistence.create(positionId);
    }

    /**
     * Deletes the positions with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param positionId the primary key of the positions
     * @return the positions that was removed
     * @throws PortalException if a positions with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Positions deletePositions(long positionId)
        throws PortalException, SystemException {
        return positionsPersistence.remove(positionId);
    }

    /**
     * Deletes the positions from the database. Also notifies the appropriate model listeners.
     *
     * @param positions the positions
     * @return the positions that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Positions deletePositions(Positions positions)
        throws SystemException {
        return positionsPersistence.remove(positions);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Positions.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return positionsPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.EmployeesDB.model.impl.PositionsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return positionsPersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.EmployeesDB.model.impl.PositionsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return positionsPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return positionsPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return positionsPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public Positions fetchPositions(long positionId) throws SystemException {
        return positionsPersistence.fetchByPrimaryKey(positionId);
    }

    /**
     * Returns the positions with the primary key.
     *
     * @param positionId the primary key of the positions
     * @return the positions
     * @throws PortalException if a positions with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Positions getPositions(long positionId)
        throws PortalException, SystemException {
        return positionsPersistence.findByPrimaryKey(positionId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return positionsPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the positionses.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.EmployeesDB.model.impl.PositionsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of positionses
     * @param end the upper bound of the range of positionses (not inclusive)
     * @return the range of positionses
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Positions> getPositionses(int start, int end)
        throws SystemException {
        return positionsPersistence.findAll(start, end);
    }

    /**
     * Returns the number of positionses.
     *
     * @return the number of positionses
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getPositionsesCount() throws SystemException {
        return positionsPersistence.countAll();
    }

    /**
     * Updates the positions in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param positions the positions
     * @return the positions that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Positions updatePositions(Positions positions)
        throws SystemException {
        return positionsPersistence.update(positions);
    }

    /**
     * Returns the bank local service.
     *
     * @return the bank local service
     */
    public com.EmployeesDB.service.BankLocalService getBankLocalService() {
        return bankLocalService;
    }

    /**
     * Sets the bank local service.
     *
     * @param bankLocalService the bank local service
     */
    public void setBankLocalService(
        com.EmployeesDB.service.BankLocalService bankLocalService) {
        this.bankLocalService = bankLocalService;
    }

    /**
     * Returns the bank persistence.
     *
     * @return the bank persistence
     */
    public BankPersistence getBankPersistence() {
        return bankPersistence;
    }

    /**
     * Sets the bank persistence.
     *
     * @param bankPersistence the bank persistence
     */
    public void setBankPersistence(BankPersistence bankPersistence) {
        this.bankPersistence = bankPersistence;
    }

    /**
     * Returns the employees local service.
     *
     * @return the employees local service
     */
    public com.EmployeesDB.service.EmployeesLocalService getEmployeesLocalService() {
        return employeesLocalService;
    }

    /**
     * Sets the employees local service.
     *
     * @param employeesLocalService the employees local service
     */
    public void setEmployeesLocalService(
        com.EmployeesDB.service.EmployeesLocalService employeesLocalService) {
        this.employeesLocalService = employeesLocalService;
    }

    /**
     * Returns the employees persistence.
     *
     * @return the employees persistence
     */
    public EmployeesPersistence getEmployeesPersistence() {
        return employeesPersistence;
    }

    /**
     * Sets the employees persistence.
     *
     * @param employeesPersistence the employees persistence
     */
    public void setEmployeesPersistence(
        EmployeesPersistence employeesPersistence) {
        this.employeesPersistence = employeesPersistence;
    }

    /**
     * Returns the positions local service.
     *
     * @return the positions local service
     */
    public com.EmployeesDB.service.PositionsLocalService getPositionsLocalService() {
        return positionsLocalService;
    }

    /**
     * Sets the positions local service.
     *
     * @param positionsLocalService the positions local service
     */
    public void setPositionsLocalService(
        com.EmployeesDB.service.PositionsLocalService positionsLocalService) {
        this.positionsLocalService = positionsLocalService;
    }

    /**
     * Returns the positions persistence.
     *
     * @return the positions persistence
     */
    public PositionsPersistence getPositionsPersistence() {
        return positionsPersistence;
    }

    /**
     * Sets the positions persistence.
     *
     * @param positionsPersistence the positions persistence
     */
    public void setPositionsPersistence(
        PositionsPersistence positionsPersistence) {
        this.positionsPersistence = positionsPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.EmployeesDB.model.Positions",
            positionsLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.EmployeesDB.model.Positions");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Positions.class;
    }

    protected String getModelClassName() {
        return Positions.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = positionsPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
