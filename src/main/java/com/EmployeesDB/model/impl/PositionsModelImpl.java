package com.EmployeesDB.model.impl;

import com.EmployeesDB.model.Positions;
import com.EmployeesDB.model.PositionsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Positions service. Represents a row in the &quot;testtask_Positions&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.EmployeesDB.model.PositionsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PositionsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PositionsImpl
 * @see com.EmployeesDB.model.Positions
 * @see com.EmployeesDB.model.PositionsModel
 * @generated
 */
public class PositionsModelImpl extends BaseModelImpl<Positions>
    implements PositionsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a positions model instance should use the {@link com.EmployeesDB.model.Positions} interface instead.
     */
    public static final String TABLE_NAME = "testtask_Positions";
    public static final Object[][] TABLE_COLUMNS = {
            { "positionId", Types.BIGINT },
            { "positionName", Types.VARCHAR },
            { "isArchived", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table testtask_Positions (positionId LONG not null primary key,positionName VARCHAR(75) null,isArchived BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table testtask_Positions";
    public static final String ORDER_BY_JPQL = " ORDER BY positions.positionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY testtask_Positions.positionId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.EmployeesDB.model.Positions"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.EmployeesDB.model.Positions"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.EmployeesDB.model.Positions"));
    private static ClassLoader _classLoader = Positions.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Positions.class
        };
    private long _positionId;
    private String _positionName;
    private boolean _isArchived;
    private Positions _escapedModel;

    public PositionsModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _positionId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPositionId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _positionId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Positions.class;
    }

    @Override
    public String getModelClassName() {
        return Positions.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("positionId", getPositionId());
        attributes.put("positionName", getPositionName());
        attributes.put("isArchived", getIsArchived());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long positionId = (Long) attributes.get("positionId");

        if (positionId != null) {
            setPositionId(positionId);
        }

        String positionName = (String) attributes.get("positionName");

        if (positionName != null) {
            setPositionName(positionName);
        }

        Boolean isArchived = (Boolean) attributes.get("isArchived");

        if (isArchived != null) {
            setIsArchived(isArchived);
        }
    }

    @Override
    public long getPositionId() {
        return _positionId;
    }

    @Override
    public void setPositionId(long positionId) {
        _positionId = positionId;
    }

    @Override
    public String getPositionName() {
        if (_positionName == null) {
            return StringPool.BLANK;
        } else {
            return _positionName;
        }
    }

    @Override
    public void setPositionName(String positionName) {
        _positionName = positionName;
    }

    @Override
    public boolean getIsArchived() {
        return _isArchived;
    }

    @Override
    public boolean isIsArchived() {
        return _isArchived;
    }

    @Override
    public void setIsArchived(boolean isArchived) {
        _isArchived = isArchived;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Positions.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Positions toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Positions) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PositionsImpl positionsImpl = new PositionsImpl();

        positionsImpl.setPositionId(getPositionId());
        positionsImpl.setPositionName(getPositionName());
        positionsImpl.setIsArchived(getIsArchived());

        positionsImpl.resetOriginalValues();

        return positionsImpl;
    }

    @Override
    public int compareTo(Positions positions) {
        long primaryKey = positions.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Positions)) {
            return false;
        }

        Positions positions = (Positions) obj;

        long primaryKey = positions.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Positions> toCacheModel() {
        PositionsCacheModel positionsCacheModel = new PositionsCacheModel();

        positionsCacheModel.positionId = getPositionId();

        positionsCacheModel.positionName = getPositionName();

        String positionName = positionsCacheModel.positionName;

        if ((positionName != null) && (positionName.length() == 0)) {
            positionsCacheModel.positionName = null;
        }

        positionsCacheModel.isArchived = getIsArchived();

        return positionsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{positionId=");
        sb.append(getPositionId());
        sb.append(", positionName=");
        sb.append(getPositionName());
        sb.append(", isArchived=");
        sb.append(getIsArchived());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.EmployeesDB.model.Positions");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>positionId</column-name><column-value><![CDATA[");
        sb.append(getPositionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>positionName</column-name><column-value><![CDATA[");
        sb.append(getPositionName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isArchived</column-name><column-value><![CDATA[");
        sb.append(getIsArchived());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
